With two Nginx servers and a load balancer, you’ll need to set up your domain to point to the load balancer, which will then distribute the traffic to your Nginx servers. Here’s how you can do it:

Step 1: DNS Configuration
Log in to your domain registrar’s control panel.
Find the DNS settings for your domain.
Create an A record with the following details:
Name/Host: @ (or leave it blank, depending on your registrar)
Value/Points to: Your load balancer’s IP address
TTL: Leave it as the default or set it to a low value (e.g., 300 seconds) for faster propagation.
Example:

Type	Name	Value	TTL
A	@	LoadBalancerIP	300
Step 2: Load Balancer Configuration
Configure your load balancer to distribute traffic to your two Nginx servers. Below is an example configuration for an Nginx load balancer:

Log in to your load balancer server via SSH.
Install Nginx (if not already installed):
sh
Copy code
sudo apt update
sudo apt install nginx
Edit your Nginx configuration file for the load balancer (usually located in /etc/nginx/nginx.conf or you can create a new file in /etc/nginx/conf.d/).
Example configuration (/etc/nginx/conf.d/load_balancer.conf):

nginx
Copy code
http {
    upstream backend {
        server 192.168.1.2;  # IP address of the first Nginx server
        server 192.168.1.3;  # IP address of the second Nginx server
    }

    server {
        listen 80;
        server_name yourdomain.tech www.yourdomain.tech;

        location / {
            proxy_pass http://backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }
}
Test the configuration:
sh
Copy code
sudo nginx -t
Reload Nginx:
sh
Copy code
sudo systemctl reload nginx
Step 3: Backend Nginx Servers Configuration
Ensure that both Nginx servers are configured to serve your site.

Log in to each Nginx server via SSH.
Edit the Nginx configuration file on each server (usually located in /etc/nginx/sites-available/).
Example configuration (/etc/nginx/sites-available/yourdomain.tech):

nginx
Copy code
server {
    listen 80;
    server_name yourdomain.tech www.yourdomain.tech;

    root /var/www/yourdomain;
    index index.html index.htm index.php;

    location / {
        try_files $uri $uri/ =404;
    }

    # Add additional configuration such as PHP handling, etc.
}
Create a symbolic link to enable the configuration on each server:
sh
Copy code
sudo ln -s /etc/nginx/sites-available/yourdomain.tech /etc/nginx/sites-enabled/
Test the configuration on each server:
sh
Copy code
sudo nginx -t
Reload Nginx on each server:
sh
Copy code
sudo systemctl reload nginx
Additional Steps
SSL/TLS Certificate: It’s highly recommended to secure your domain with an SSL/TLS certificate. You can use Let’s Encrypt for a free SSL certificate.
Health Checks: Configure health checks on your load balancer to ensure traffic is only sent to healthy Nginx servers.
Load Balancing Algorithm: You can adjust the load balancing algorithm (e.g., round-robin, least connections) based on your needs.
If you encounter any issues or need further assistance, feel free to ask!

IMPORTANT NOTES:
 - Congratulations! Your certificate and chain have been saved at:
   /etc/letsencrypt/live/www.ibrahimhanafideveloper.tech/fullchain.pem
   Your key file has been saved at:
   /etc/letsencrypt/live/www.ibrahimhanafideveloper.tech/privkey.pem
   Your cert will expire on 2024-10-09. To obtain a new or tweaked
   version of this certificate in the future, simply run certbot
   again. To non-interactively renew *all* of your certificates, run
   "certbot renew"
 - If you like Certbot, please consider supporting our work by:

   Donating to ISRG / Let's Encrypt:   https://letsencrypt.org/donate
   Donating to EFF:                    https://eff.org/donate-le

the new ssl paths:
/home/ubuntu/fullchain.pem
/home/ubuntu/privkey.pem

For the latest version of letsencrypt certbot,fullchain.pem and privkey.pem files will be generated for you in /etc/letsencrypt/live/example.com folder. They need to be combined in order to HAProxy to read it properly.

cat fullchain.pem privkey.pem > example.com.pem
In HAProxy configuraion /etc/haproxy/haproxy.cfg

bind *:443 ssl crt /etc/letsencrypt/live/example.com/example.com.pem

